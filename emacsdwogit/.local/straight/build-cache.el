
:tanat

"28.0.50"

#s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("org-elpa" ("2020-11-08 13:41:57" nil (:local-repo nil :package "org-elpa" :type git)) "melpa" ("2020-11-08 13:41:57" nil (:type git :host github :repo "melpa/melpa" :no-build t :package "melpa" :local-repo "melpa")) "gnu-elpa-mirror" ("2020-11-08 13:41:57" nil (:type git :host github :repo "emacs-straight/gnu-elpa-mirror" :no-build t :package "gnu-elpa-mirror" :local-repo "gnu-elpa-mirror")) "emacsmirror-mirror" ("2020-11-08 13:41:57" nil (:type git :host github :repo "emacs-straight/emacsmirror-mirror" :no-build t :package "emacsmirror-mirror" :local-repo "emacsmirror-mirror")) "straight" ("2020-11-08 13:41:57" ("emacs") (:host github :repo "raxod502/straight.el" :branch "develop" :local-repo "straight.el" :files ("straight*.el") :package "straight" :type git)) "use-package" ("2020-11-08 13:41:57" ("emacs" "bind-key") (:type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package" :package "use-package" :local-repo "use-package")) "bind-key" ("2020-11-08 13:41:57" nil (:flavor melpa :files ("bind-key.el" "bind-key-pkg.el") :package "bind-key" :local-repo "use-package" :type git :repo "jwiegley/use-package" :host github)) "auto-minor-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode" :package "auto-minor-mode" :local-repo "auto-minor-mode")) "gcmh" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host gitlab :repo "koral/gcmh" :package "gcmh" :local-repo "gcmh")) "explain-pause-mode" ("2020-10-27 15:21:44" nil (:host github :repo "lastquestion/explain-pause-mode" :package "explain-pause-mode" :type git :local-repo "explain-pause-mode")) "all-the-icons" ("2020-10-27 15:21:44" ("emacs" "memoize") (:type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el" :package "all-the-icons" :local-repo "all-the-icons.el")) "memoize" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "skeeto/emacs-memoize" :package "memoize" :local-repo "emacs-memoize")) "hide-mode-line" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line" :package "hide-mode-line" :local-repo "emacs-hide-mode-line")) "highlight-numbers" ("2020-10-27 15:21:44" ("emacs" "parent-mode") (:type git :flavor melpa :host github :repo "Fanael/highlight-numbers" :package "highlight-numbers" :local-repo "highlight-numbers")) "parent-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "Fanael/parent-mode" :package "parent-mode" :local-repo "parent-mode")) "rainbow-delimiters" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters" :package "rainbow-delimiters" :local-repo "rainbow-delimiters")) "restart-emacs" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "iqbalansari/restart-emacs" :package "restart-emacs" :local-repo "restart-emacs")) "better-jumper" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "gilbertw1/better-jumper" :package "better-jumper" :local-repo "better-jumper")) "dtrt-indent" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "jscheid/dtrt-indent" :package "dtrt-indent" :local-repo "dtrt-indent")) "helpful" ("2020-10-27 15:21:44" ("emacs" "dash" "dash-functional" "s" "f" "elisp-refs") (:type git :flavor melpa :host github :repo "Wilfred/helpful" :package "helpful" :local-repo "helpful")) "dash" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el" :package "dash" :local-repo "dash.el")) "dash-functional" ("2020-10-27 15:21:44" ("dash" "emacs") (:flavor melpa :files ("dash-functional.el" "dash-functional-pkg.el") :package "dash-functional" :local-repo "dash.el" :type git :repo "magnars/dash.el" :host github)) "s" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("s.el" "s-pkg.el") :host github :repo "magnars/s.el" :package "s" :local-repo "s.el")) "f" ("2020-10-27 15:21:44" ("s" "dash") (:type git :flavor melpa :files ("f.el" "f-pkg.el") :host github :repo "rejeep/f.el" :package "f" :local-repo "f.el")) "elisp-refs" ("2020-10-27 15:21:44" ("dash" "s") (:type git :flavor melpa :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs" :package "elisp-refs" :local-repo "elisp-refs")) "pcre2el" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :files ("pcre2el.el" "pcre2el-pkg.el") :host github :repo "joddie/pcre2el" :package "pcre2el" :local-repo "pcre2el")) "smartparens" ("2020-10-27 15:21:44" ("dash" "cl-lib") (:type git :flavor melpa :host github :repo "Fuco1/smartparens" :package "smartparens" :local-repo "smartparens")) "ws-butler" ("2020-10-27 15:21:44" ("emacs") (:host github :repo "hlissner/ws-butler" :flavor melpa :package "ws-butler" :type git :local-repo "ws-butler")) "projectile" ("2020-10-27 15:21:44" ("emacs" "pkg-info") (:type git :flavor melpa :files ("projectile.el" "projectile-pkg.el") :host github :repo "bbatsov/projectile" :package "projectile" :local-repo "projectile")) "pkg-info" ("2020-10-27 15:21:44" ("epl") (:type git :flavor melpa :host github :repo "emacsorphanage/pkg-info" :package "pkg-info" :local-repo "pkg-info")) "epl" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :host github :repo "cask/epl" :package "epl" :local-repo "epl")) "general" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/general.el" :package "general" :local-repo "general.el")) "which-key" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "justbur/emacs-which-key" :package "which-key" :local-repo "emacs-which-key")) "company" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "company-mode/company-mode" :package "company" :local-repo "company-mode")) "company-dict" ("2020-10-27 15:21:44" ("emacs" "company" "parent-mode") (:type git :flavor melpa :host github :repo "hlissner/emacs-company-dict" :package "company-dict" :local-repo "emacs-company-dict")) "swiper" ("2020-10-27 15:21:44" ("emacs" "ivy") (:type git :flavor melpa :files ("swiper.el" "swiper-pkg.el") :host github :repo "abo-abo/swiper" :package "swiper" :local-repo "swiper")) "ivy" ("2020-10-27 15:21:44" ("emacs") (:flavor melpa :files (:defaults (:exclude "swiper.el" "counsel.el" "ivy-hydra.el" "ivy-avy.el") "doc/ivy-help.org" "ivy-pkg.el") :package "ivy" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "ivy-hydra" ("2020-10-27 15:21:44" ("emacs" "ivy" "hydra") (:flavor melpa :files ("ivy-hydra.el" "ivy-hydra-pkg.el") :package "ivy-hydra" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "hydra" ("2020-10-27 15:21:44" ("cl-lib" "lv") (:type git :flavor melpa :files (:defaults (:exclude "lv.el") "hydra-pkg.el") :host github :repo "abo-abo/hydra" :package "hydra" :local-repo "hydra")) "lv" ("2020-10-27 15:21:44" nil (:flavor melpa :files ("lv.el" "lv-pkg.el") :package "lv" :local-repo "hydra" :type git :repo "abo-abo/hydra" :host github)) "counsel" ("2020-10-27 15:21:44" ("emacs" "swiper") (:flavor melpa :files ("counsel.el" "counsel-pkg.el") :package "counsel" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "amx" ("2020-10-27 15:21:44" ("emacs" "s") (:type git :flavor melpa :host github :repo "DarwinAwardWinner/amx" :package "amx" :local-repo "amx")) "counsel-projectile" ("2020-10-27 15:21:44" ("counsel" "projectile") (:type git :flavor melpa :host github :repo "ericdanan/counsel-projectile" :package "counsel-projectile" :local-repo "counsel-projectile")) "ivy-rich" ("2020-10-27 15:21:44" ("emacs" "ivy") (:type git :flavor melpa :files ("*.el" "ivy-rich-pkg.el") :host github :repo "Yevgnen/ivy-rich" :package "ivy-rich" :local-repo "ivy-rich")) "wgrep" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo "Emacs-wgrep")) "doom-themes" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :files (:defaults "themes/*.el" "doom-themes-pkg.el") :host github :repo "hlissner/emacs-doom-themes" :package "doom-themes" :local-repo "emacs-doom-themes")) "solaire-mode" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode" :package "solaire-mode" :local-repo "emacs-solaire-mode")) "hl-todo" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "tarsius/hl-todo" :package "hl-todo" :local-repo "hl-todo")) "doom-modeline" ("2020-10-27 15:21:44" ("emacs" "all-the-icons" "shrink-path" "dash") (:type git :flavor melpa :host github :repo "seagle0128/doom-modeline" :package "doom-modeline" :local-repo "doom-modeline")) "shrink-path" ("2020-10-27 15:21:44" ("emacs" "s" "dash" "f") (:type git :flavor melpa :host gitlab :repo "bennya/shrink-path.el" :package "shrink-path" :local-repo "shrink-path.el")) "anzu" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/anzu" :package "anzu" :local-repo "anzu")) "evil-anzu" ("2020-10-27 15:21:44" ("evil" "anzu") (:type git :flavor melpa :host github :repo "emacsorphanage/evil-anzu" :package "evil-anzu" :local-repo "evil-anzu")) "evil" ("2020-10-27 15:21:44" ("emacs" "goto-chg" "cl-lib") (:type git :flavor melpa :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil" :package "evil" :local-repo "evil")) "goto-chg" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "emacs-evil/goto-chg" :package "goto-chg" :local-repo "goto-chg")) "nav-flash" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "rolandwalker/nav-flash" :package "nav-flash" :local-repo "nav-flash")) "evil-goggles" ("2020-10-27 15:21:44" ("emacs" "evil") (:type git :flavor melpa :host github :repo "edkolev/evil-goggles" :package "evil-goggles" :local-repo "evil-goggles")) "treemacs" ("2020-10-27 15:21:44" ("emacs" "cl-lib" "dash" "s" "f" "ace-window" "pfuture" "hydra" "ht") (:type git :flavor melpa :files (:defaults "Changelog.org" "icons" "src/elisp/treemacs*.el" "src/scripts/treemacs*.py" (:exclude "src/extra/*") "treemacs-pkg.el") :host github :repo "Alexander-Miller/treemacs" :package "treemacs" :local-repo "treemacs")) "ace-window" ("2020-10-27 15:21:44" ("avy") (:type git :flavor melpa :host github :repo "abo-abo/ace-window" :package "ace-window" :local-repo "ace-window")) "avy" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "abo-abo/avy" :package "avy" :local-repo "avy")) "pfuture" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "Alexander-Miller/pfuture" :package "pfuture" :local-repo "pfuture")) "ht" ("2020-10-27 15:21:44" ("dash") (:type git :flavor melpa :files ("ht.el" "ht-pkg.el") :host github :repo "Wilfred/ht.el" :package "ht" :local-repo "ht.el")) "treemacs-evil" ("2020-10-27 15:21:44" ("emacs" "evil" "treemacs") (:flavor melpa :files ("src/extra/treemacs-evil.el" "treemacs-evil-pkg.el") :package "treemacs-evil" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "treemacs-projectile" ("2020-10-27 15:21:44" ("emacs" "projectile" "treemacs") (:flavor melpa :files ("src/extra/treemacs-projectile.el" "treemacs-projectile-pkg.el") :package "treemacs-projectile" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "treemacs-magit" ("2020-10-27 15:21:44" ("emacs" "treemacs" "pfuture" "magit") (:flavor melpa :files ("src/extra/treemacs-magit.el" "treemacs-magit-pkg.el") :package "treemacs-magit" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "magit" ("2020-10-27 15:21:44" ("emacs" "async" "dash" "git-commit" "transient" "with-editor") (:flavor melpa :files ("lisp/magit" "lisp/magit*.el" "lisp/git-rebase.el" "Documentation/magit.texi" "Documentation/AUTHORS.md" "LICENSE" (:exclude "lisp/magit-libgit.el") "magit-pkg.el") :package "magit" :local-repo "magit" :type git :repo "magit/magit" :host github)) "async" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "jwiegley/emacs-async" :package "async" :local-repo "emacs-async")) "git-commit" ("2020-10-27 15:21:44" ("emacs" "dash" "transient" "with-editor") (:type git :flavor melpa :files ("lisp/git-commit.el" "git-commit-pkg.el") :host github :repo "magit/magit" :package "git-commit" :local-repo "magit")) "transient" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files ("lisp/*.el" "docs/transient.texi" "transient-pkg.el") :host github :repo "magit/transient" :package "transient" :local-repo "transient")) "with-editor" ("2020-10-27 15:21:44" ("emacs" "async") (:type git :flavor melpa :host github :repo "magit/with-editor" :package "with-editor" :local-repo "with-editor")) "treemacs-persp" ("2020-10-27 15:21:44" ("emacs" "treemacs" "persp-mode" "dash") (:flavor melpa :files ("src/extra/treemacs-persp.el" "treemacs-persp-pkg.el") :package "treemacs-persp" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "persp-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el" :package "persp-mode" :local-repo "persp-mode.el")) "unicode-fonts" ("2020-10-27 15:21:44" ("font-utils" "ucs-utils" "list-utils" "persistent-soft" "pcache") (:type git :flavor melpa :host github :repo "rolandwalker/unicode-fonts" :package "unicode-fonts" :local-repo "unicode-fonts")) "font-utils" ("2020-10-27 15:21:44" ("persistent-soft" "pcache") (:type git :flavor melpa :host github :repo "rolandwalker/font-utils" :package "font-utils" :local-repo "font-utils")) "persistent-soft" ("2020-10-27 15:21:44" ("pcache" "list-utils") (:type git :flavor melpa :host github :repo "rolandwalker/persistent-soft" :package "persistent-soft" :local-repo "persistent-soft")) "pcache" ("2020-10-27 15:21:44" ("eieio") (:type git :flavor melpa :host github :repo "sigma/pcache" :package "pcache" :local-repo "pcache")) "list-utils" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "rolandwalker/list-utils" :package "list-utils" :local-repo "list-utils")) "ucs-utils" ("2020-10-27 15:21:44" ("persistent-soft" "pcache" "list-utils") (:type git :flavor melpa :host github :repo "rolandwalker/ucs-utils" :package "ucs-utils" :local-repo "ucs-utils")) "git-gutter-fringe" ("2020-10-27 15:21:44" ("git-gutter" "fringe-helper" "cl-lib" "emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe" :package "git-gutter-fringe" :local-repo "git-gutter-fringe")) "git-gutter" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter" :package "git-gutter" :local-repo "git-gutter")) "fringe-helper" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "nschum/fringe-helper.el" :package "fringe-helper" :local-repo "fringe-helper.el")) "vi-tilde-fringe" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe" :package "vi-tilde-fringe" :local-repo "vi-tilde-fringe")) "evil-args" ("2020-10-27 15:21:44" ("evil") (:type git :flavor melpa :host github :repo "wcsmith/evil-args" :package "evil-args" :local-repo "evil-args")) "evil-easymotion" ("2020-10-27 15:21:44" ("emacs" "avy" "cl-lib") (:type git :flavor melpa :host github :repo "PythonNut/evil-easymotion" :package "evil-easymotion" :local-repo "evil-easymotion")) "evil-embrace" ("2020-10-27 15:21:44" ("emacs" "embrace" "evil-surround") (:type git :flavor melpa :host github :repo "cute-jumper/evil-embrace.el" :package "evil-embrace" :local-repo "evil-embrace.el")) "embrace" ("2020-10-27 15:21:44" ("cl-lib" "expand-region") (:type git :flavor melpa :host github :repo "cute-jumper/embrace.el" :package "embrace" :local-repo "embrace.el")) "expand-region" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "magnars/expand-region.el" :package "expand-region" :local-repo "expand-region.el")) "evil-surround" ("2020-10-27 15:21:44" ("evil") (:type git :flavor melpa :host github :repo "emacs-evil/evil-surround" :package "evil-surround" :local-repo "evil-surround")) "evil-escape" ("2020-10-27 15:21:44" ("emacs" "evil" "cl-lib") (:host github :repo "hlissner/evil-escape" :flavor melpa :package "evil-escape" :type git :local-repo "evil-escape")) "evil-exchange" ("2020-10-27 15:21:44" ("evil" "cl-lib") (:type git :flavor melpa :host github :repo "Dewdrops/evil-exchange" :package "evil-exchange" :local-repo "evil-exchange")) "evil-indent-plus" ("2020-10-27 15:21:44" ("evil" "cl-lib") (:type git :flavor melpa :host github :repo "TheBB/evil-indent-plus" :package "evil-indent-plus" :local-repo "evil-indent-plus")) "evil-lion" ("2020-10-27 15:21:44" ("emacs" "evil") (:type git :flavor melpa :files ("evil-lion.el" "evil-lion-pkg.el") :host github :repo "edkolev/evil-lion" :package "evil-lion" :local-repo "evil-lion")) "evil-nerd-commenter" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "redguardtoo/evil-nerd-commenter" :package "evil-nerd-commenter" :local-repo "evil-nerd-commenter")) "evil-numbers" ("2020-10-27 15:21:44" nil (:host github :repo "janpath/evil-numbers" :flavor melpa :package "evil-numbers" :type git :local-repo "evil-numbers")) "evil-snipe" ("2020-10-27 15:21:44" ("emacs" "evil" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/evil-snipe" :package "evil-snipe" :local-repo "evil-snipe")) "evil-textobj-anyblock" ("2020-10-27 15:21:44" ("cl-lib" "evil") (:type git :flavor melpa :host github :repo "noctuid/evil-textobj-anyblock" :package "evil-textobj-anyblock" :local-repo "evil-textobj-anyblock")) "evil-traces" ("2020-10-27 15:21:44" ("emacs" "evil") (:type git :flavor melpa :host github :repo "mamapanda/evil-traces" :package "evil-traces" :local-repo "evil-traces")) "evil-visualstar" ("2020-10-27 15:21:44" ("evil") (:type git :flavor melpa :host github :repo "bling/evil-visualstar" :package "evil-visualstar" :local-repo "evil-visualstar")) "exato" ("2020-10-27 15:21:44" ("evil" "emacs") (:type git :flavor melpa :host github :repo "ninrod/exato" :package "exato" :local-repo "exato")) "evil-quick-diff" ("2020-10-27 15:21:44" ("evil" "cl-lib") (:host github :repo "rgrinberg/evil-quick-diff" :package "evil-quick-diff" :type git :local-repo "evil-quick-diff")) "evil-collection" ("2020-10-27 15:21:44" ("emacs" "evil" "annalist") (:type git :flavor melpa :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection" :package "evil-collection" :local-repo "evil-collection")) "annalist" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/annalist.el" :package "annalist" :local-repo "annalist.el")) "yasnippet" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet" :package "yasnippet" :local-repo "yasnippet")) "vimish-fold" ("2020-10-27 15:21:44" ("emacs" "cl-lib" "f") (:type git :flavor melpa :host github :repo "seregaxvm/vimish-fold" :package "vimish-fold" :local-repo "vimish-fold")) "evil-vimish-fold" ("2020-10-27 15:21:44" ("emacs" "evil" "vimish-fold") (:type git :flavor melpa :host github :repo "alexmurray/evil-vimish-fold" :package "evil-vimish-fold" :local-repo "evil-vimish-fold")) "iedit" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "victorhge/iedit" :package "iedit" :local-repo "iedit")) "evil-multiedit" ("2020-10-27 15:21:44" ("emacs" "evil" "iedit" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/evil-multiedit" :package "evil-multiedit" :local-repo "evil-multiedit")) "evil-mc" ("2020-10-27 15:21:44" ("emacs" "evil" "cl-lib") (:type git :flavor melpa :host github :repo "gabesoft/evil-mc" :package "evil-mc" :local-repo "evil-mc")) "rotate-text" ("2020-10-27 15:21:44" nil (:host github :repo "debug-ito/rotate-text.el" :package "rotate-text" :type git :local-repo "rotate-text.el")) "auto-yasnippet" ("2020-10-27 15:21:44" ("yasnippet") (:type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet" :package "auto-yasnippet" :local-repo "auto-yasnippet")) "doom-snippets" ("2020-10-27 15:21:44" ("emacs" "cl-lib" "yasnippet") (:host github :repo "hlissner/doom-snippets" :files ("*.el" "*") :package "doom-snippets" :type git :local-repo "doom-snippets")) "diredfl" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "purcell/diredfl" :package "diredfl" :local-repo "diredfl")) "dired-git-info" ("2020-10-27 15:21:44" ("emacs") (:type git :host github :repo "emacs-straight/dired-git-info" :files ("*" (:exclude ".git")) :package "dired-git-info" :local-repo "dired-git-info")) "diff-hl" ("2020-10-27 15:21:44" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "dgutov/diff-hl" :package "diff-hl" :local-repo "diff-hl")) "dired-rsync" ("2020-10-27 15:21:44" ("s" "dash" "emacs") (:type git :flavor melpa :host github :repo "stsquad/dired-rsync" :package "dired-rsync" :local-repo "dired-rsync")) "fd-dired" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "yqrashawn/fd-dired" :package "fd-dired" :local-repo "fd-dired")) "ibuffer-projectile" ("2020-10-27 15:21:44" ("projectile" "emacs") (:type git :flavor melpa :host github :repo "purcell/ibuffer-projectile" :package "ibuffer-projectile" :local-repo "ibuffer-projectile")) "ibuffer-vc" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "purcell/ibuffer-vc" :package "ibuffer-vc" :local-repo "ibuffer-vc")) "browse-at-remote" ("2020-10-27 15:21:44" ("f" "s" "cl-lib") (:type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote" :package "browse-at-remote" :local-repo "browse-at-remote")) "git-timemachine" ("2020-10-27 15:21:44" ("emacs" "transient") (:type git :flavor melpa :host gitlab :repo "pidu/git-timemachine" :package "git-timemachine" :local-repo "git-timemachine")) "gitconfig-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("gitconfig-mode.el" "gitconfig-mode-pkg.el") :host github :repo "magit/git-modes" :package "gitconfig-mode" :local-repo "git-modes")) "gitignore-mode" ("2020-10-27 15:21:44" nil (:flavor melpa :files ("gitignore-mode.el" "gitignore-mode-pkg.el") :package "gitignore-mode" :local-repo "git-modes" :type git :repo "magit/git-modes" :host github)) "eshell-up" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "peterwvj/eshell-up" :package "eshell-up" :local-repo "eshell-up")) "eshell-z" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :host github :repo "xuchunyang/eshell-z" :package "eshell-z" :local-repo "eshell-z")) "esh-help" ("2020-10-27 15:21:44" ("dash") (:type git :flavor melpa :host github :repo "tom-tan/esh-help" :package "esh-help" :local-repo "esh-help")) "eshell-did-you-mean" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "xuchunyang/eshell-did-you-mean" :package "eshell-did-you-mean" :local-repo "eshell-did-you-mean")) "fish-completion" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host gitlab :repo "Ambrevar/emacs-fish-completion" :package "fish-completion" :local-repo "emacs-fish-completion")) "bash-completion" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "szermatt/emacs-bash-completion" :package "bash-completion" :local-repo "emacs-bash-completion")) "multi-term" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "manateelazycat/multi-term" :package "multi-term" :local-repo "multi-term")) "vterm" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files ("*" (:exclude ".dir-locals.el" ".gitignore" ".clang-format" ".travis.yml") "vterm-pkg.el") :host github :repo "akermu/emacs-libvterm" :package "vterm" :local-repo "emacs-libvterm")) "flycheck" ("2020-10-27 15:21:44" ("dash" "pkg-info" "let-alist" "seq" "emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck" :package "flycheck" :local-repo "flycheck")) "flycheck-popup-tip" ("2020-10-27 15:21:44" ("flycheck" "popup" "emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip" :package "flycheck-popup-tip" :local-repo "flycheck-popup-tip")) "popup" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :files ("popup.el" "popup-pkg.el") :host github :repo "auto-complete/popup-el" :package "popup" :local-repo "popup-el")) "spell-fu" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host gitlab :repo "ideasman42/emacs-spell-fu" :package "spell-fu" :local-repo "emacs-spell-fu")) "realgud" ("2020-10-27 15:21:44" ("load-relative" "loc-changes" "test-simple" "emacs") (:type git :flavor melpa :files ("realgud.el" "realgud/.nosearch" "realgud-recursive-autoloads.el" ("realgud/common" "realgud/common/*.el") ("realgud/common/buffer" "realgud/common/buffer/*.el") ("realgud/debugger/bashdb" "realgud/debugger/bashdb/*.el") ("realgud/debugger/gdb" "realgud/debugger/gdb/*.el") ("realgud/debugger/gub" "realgud/debugger/gub/*.el") ("realgud/debugger/ipdb" "realgud/debugger/ipdb/*.el") ("realgud/debugger/jdb" "realgud/debugger/jdb/*.el") ("realgud/debugger/kshdb" "realgud/debugger/kshdb/*.el") ("realgud/debugger/nodejs" "realgud/debugger/nodejs/*.el") ("realgud/debugger/pdb" "realgud/debugger/pdb/*.el") ("realgud/debugger/perldb" "realgud/debugger/perldb/*.el") ("realgud/debugger/rdebug" "realgud/debugger/rdebug/*.el") ("realgud/debugger/remake" "realgud/debugger/remake/*.el") ("realgud/debugger/trepan" "realgud/debugger/trepan/*.el") ("realgud/debugger/trepan.pl" "realgud/debugger/trepan.pl/*.el") ("realgud/debugger/trepan2" "realgud/debugger/trepan2/*.el") ("realgud/debugger/trepan3k" "realgud/debugger/trepan3k/*.el") ("realgud/debugger/trepanjs" "realgud/debugger/trepanjs/*.el") ("realgud/debugger/zshdb" "realgud/debugger/zshdb/*.el") ("realgud/lang" "realgud/lang/*.el") "realgud-pkg.el") :host github :repo "realgud/realgud" :package "realgud" :local-repo "realgud")) "load-relative" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "rocky/emacs-load-relative" :package "load-relative" :local-repo "emacs-load-relative")) "loc-changes" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("loc-changes.el" "loc-changes-pkg.el") :host github :repo "rocky/emacs-loc-changes" :package "loc-changes" :local-repo "emacs-loc-changes")) "test-simple" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :host github :repo "rocky/emacs-test-simple" :package "test-simple" :local-repo "emacs-test-simple")) "realgud-trepan-ni" ("2020-10-27 15:21:44" ("load-relative" "realgud" "emacs") (:type git :flavor melpa :files (:defaults ("trepan-ni" "trepan-ni/*.el") "realgud-trepan-ni-pkg.el") :host github :repo "realgud/realgud-trepan-ni" :package "realgud-trepan-ni" :local-repo "realgud-trepan-ni")) "editorconfig" ("2020-10-27 15:21:44" ("cl-lib" "emacs") (:nonrecursive t :flavor melpa :repo "editorconfig/editorconfig-emacs" :host github :package "editorconfig" :type git :local-repo "editorconfig-emacs")) "ein" ("2020-10-27 15:21:44" ("emacs" "websocket" "anaphora" "request" "deferred" "polymode" "exec-path-from-shell" "dash" "with-editor") (:type git :flavor melpa :files ("lisp/*" (:exclude "lisp/zeroein.el") "ein-pkg.el") :host github :repo "millejoh/emacs-ipython-notebook" :package "ein" :local-repo "emacs-ipython-notebook")) "websocket" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :host github :repo "ahyatt/emacs-websocket" :package "websocket" :local-repo "emacs-websocket")) "anaphora" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "rolandwalker/anaphora" :package "anaphora" :local-repo "anaphora")) "request" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request" :package "request" :local-repo "emacs-request")) "deferred" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred" :package "deferred" :local-repo "emacs-deferred")) "polymode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "polymode/polymode" :package "polymode" :local-repo "polymode")) "exec-path-from-shell" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "purcell/exec-path-from-shell" :package "exec-path-from-shell" :local-repo "exec-path-from-shell")) "quickrun" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/quickrun" :package "quickrun" :local-repo "quickrun")) "eros" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "xiongtx/eros" :package "eros" :local-repo "eros")) "dumb-jump" ("2020-10-27 15:21:44" ("emacs" "s" "dash" "popup") (:type git :flavor melpa :host github :repo "jacktasia/dumb-jump" :package "dumb-jump" :local-repo "dumb-jump")) "ivy-xref" ("2020-10-27 15:21:44" ("emacs" "ivy") (:type git :flavor melpa :host github :repo "alexmurray/ivy-xref" :package "ivy-xref" :local-repo "ivy-xref")) "dash-docs" ("2020-10-27 15:21:44" ("emacs" "cl-lib" "async") (:type git :flavor melpa :host github :repo "dash-docs-el/dash-docs" :package "dash-docs" :local-repo "dash-docs")) "counsel-dash" ("2020-10-27 15:21:44" ("emacs" "dash-docs" "counsel" "cl-lib") (:type git :flavor melpa :host github :repo "dash-docs-el/counsel-dash" :package "counsel-dash" :local-repo "counsel-dash")) "lsp-mode" ("2020-10-27 15:21:44" ("emacs" "dash" "dash-functional" "f" "ht" "spinner" "markdown-mode" "lv") (:type git :flavor melpa :files (:defaults "clients/*.el" "lsp-mode-pkg.el") :host github :repo "emacs-lsp/lsp-mode" :package "lsp-mode" :local-repo "lsp-mode")) "spinner" ("2020-10-27 15:21:44" nil (:type git :host github :repo "emacs-straight/spinner" :files ("*" (:exclude ".git")) :package "spinner" :local-repo "spinner")) "markdown-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "jrblevin/markdown-mode" :package "markdown-mode" :local-repo "markdown-mode")) "lsp-ui" ("2020-10-27 15:21:44" ("emacs" "dash" "dash-functional" "lsp-mode" "markdown-mode") (:type git :flavor melpa :files (:defaults "lsp-ui-doc.html" "resources/*" "lsp-ui-pkg.el") :host github :repo "emacs-lsp/lsp-ui" :package "lsp-ui" :local-repo "lsp-ui")) "lsp-ivy" ("2020-10-27 15:21:44" ("emacs" "dash" "lsp-mode" "ivy") (:type git :flavor melpa :host github :repo "emacs-lsp/lsp-ivy" :package "lsp-ivy" :local-repo "lsp-ivy")) "magit-gitflow" ("2020-10-27 15:21:44" ("magit" "magit-popup") (:type git :flavor melpa :host github :repo "jtatarik/magit-gitflow" :package "magit-gitflow" :local-repo "magit-gitflow")) "magit-popup" ("2020-10-27 15:21:44" ("emacs" "dash") (:type git :flavor melpa :host github :repo "magit/magit-popup" :package "magit-popup" :local-repo "magit-popup")) "magit-todos" ("2020-10-27 15:21:44" ("emacs" "async" "dash" "f" "hl-todo" "magit" "pcre2el" "s") (:type git :flavor melpa :host github :repo "alphapapa/magit-todos" :package "magit-todos" :local-repo "magit-todos")) "github-review" ("2020-10-27 15:21:44" ("emacs" "s" "ghub" "dash" "deferred" "a") (:type git :flavor melpa :host github :repo "charignon/github-review" :package "github-review" :local-repo "github-review")) "ghub" ("2020-10-27 15:21:44" ("emacs" "let-alist" "treepy") (:type git :flavor melpa :host github :repo "magit/ghub" :package "ghub" :local-repo "ghub")) "treepy" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "volrath/treepy.el" :package "treepy" :local-repo "treepy.el")) "a" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "plexus/a.el" :package "a" :local-repo "a.el")) "evil-magit" ("2020-10-27 15:21:44" ("evil" "magit") (:type git :flavor melpa :host github :repo "emacs-evil/evil-magit" :package "evil-magit" :local-repo "evil-magit")) "cmake-mode" ("2020-10-27 15:21:44" ("emacs") (:host github :repo "emacsmirror/cmake-mode" :files (:defaults "*") :flavor melpa :package "cmake-mode" :type git :local-repo "cmake-mode")) "cuda-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "chachi/cuda-mode" :package "cuda-mode" :local-repo "cuda-mode")) "demangle-mode" ("2020-10-27 15:21:44" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "liblit/demangle-mode" :package "demangle-mode" :local-repo "demangle-mode")) "disaster" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("disaster.el" "disaster-pkg.el") :host github :repo "jart/disaster" :package "disaster" :local-repo "disaster")) "modern-cpp-font-lock" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "ludwigpacifici/modern-cpp-font-lock" :package "modern-cpp-font-lock" :local-repo "modern-cpp-font-lock")) "opencl-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "salmanebah/opencl-mode" :package "opencl-mode" :local-repo "opencl-mode")) "glsl-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "jimhourihan/glsl-mode" :package "glsl-mode" :local-repo "glsl-mode")) "company-glsl" ("2020-10-27 15:21:44" ("company") (:host github :repo "Kaali/company-glsl" :flavor melpa :package "company-glsl" :type git :local-repo "company-glsl")) "irony" ("2020-10-27 15:21:44" ("cl-lib" "json") (:type git :flavor melpa :files ("*.el" "server" "irony-pkg.el") :host github :repo "Sarcasm/irony-mode" :package "irony" :local-repo "irony-mode")) "irony-eldoc" ("2020-10-27 15:21:44" ("emacs" "cl-lib" "irony") (:type git :flavor melpa :host github :repo "ikirill/irony-eldoc" :package "irony-eldoc" :local-repo "irony-eldoc")) "flycheck-irony" ("2020-10-27 15:21:44" ("emacs" "flycheck" "irony") (:type git :flavor melpa :host github :repo "Sarcasm/flycheck-irony" :package "flycheck-irony" :local-repo "flycheck-irony")) "company-irony" ("2020-10-27 15:21:44" ("emacs" "company" "irony" "cl-lib") (:type git :flavor melpa :host github :repo "Sarcasm/company-irony" :package "company-irony" :local-repo "company-irony")) "company-irony-c-headers" ("2020-10-27 15:21:44" ("cl-lib" "company" "irony") (:type git :flavor melpa :host github :repo "hotpxl/company-irony-c-headers" :package "company-irony-c-headers" :local-repo "company-irony-c-headers")) "rtags" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files ("src/rtags.el" "rtags-pkg.el") :host github :repo "Andersbakken/rtags" :package "rtags" :local-repo "rtags")) "ivy-rtags" ("2020-10-27 15:21:44" ("ivy" "rtags") (:flavor melpa :files ("src/ivy-rtags.el" "ivy-rtags-pkg.el") :package "ivy-rtags" :local-repo "rtags" :type git :repo "Andersbakken/rtags" :host github)) "csharp-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "josteink/csharp-mode" :package "csharp-mode" :local-repo "csharp-mode")) "csproj-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files (:defaults "snippets" "csproj-mode-pkg.el") :host github :repo "omajid/csproj-mode" :package "csproj-mode" :local-repo "csproj-mode")) "omnisharp" ("2020-10-27 15:21:44" ("emacs" "flycheck" "dash" "auto-complete" "popup" "csharp-mode" "cl-lib" "s" "f") (:type git :flavor melpa :host github :repo "OmniSharp/omnisharp-emacs" :package "omnisharp" :local-repo "omnisharp-emacs")) "auto-complete" ("2020-10-27 15:21:44" ("popup" "cl-lib") (:type git :flavor melpa :files ("*.el" "dict" "auto-complete-pkg.el") :host github :repo "auto-complete/auto-complete" :package "auto-complete" :local-repo "auto-complete")) "csv-mode" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :host github :repo "emacs-straight/csv-mode" :files ("*" (:exclude ".git")) :package "csv-mode" :local-repo "csv-mode")) "highlight-quoted" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/highlight-quoted" :package "highlight-quoted" :local-repo "highlight-quoted")) "macrostep" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :host github :repo "joddie/macrostep" :package "macrostep" :local-repo "macrostep")) "overseer" ("2020-10-27 15:21:44" ("emacs" "dash" "pkg-info" "f") (:type git :flavor melpa :host github :repo "tonini/overseer.el" :package "overseer" :local-repo "overseer.el")) "elisp-def" ("2020-10-27 15:21:44" ("dash" "f" "s" "emacs") (:type git :flavor melpa :host github :repo "Wilfred/elisp-def" :package "elisp-def" :local-repo "elisp-def")) "elisp-demos" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos" :package "elisp-demos" :local-repo "elisp-demos")) "flycheck-cask" ("2020-10-27 15:21:44" ("emacs" "flycheck" "dash") (:type git :flavor melpa :host github :repo "flycheck/flycheck-cask" :package "flycheck-cask" :local-repo "flycheck-cask")) "buttercup" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup" :package "buttercup" :local-repo "emacs-buttercup")) "go-eldoc" ("2020-10-27 15:21:44" ("emacs" "go-mode") (:type git :flavor melpa :host github :repo "emacsorphanage/go-eldoc" :package "go-eldoc" :local-repo "go-eldoc")) "go-mode" ("2020-10-27 15:21:44" nil (:flavor melpa :files ("go-mode.el" "go-mode-pkg.el") :package "go-mode" :local-repo "go-mode.el" :type git :repo "dominikh/go-mode.el" :host github)) "go-guru" ("2020-10-27 15:21:44" ("go-mode" "cl-lib") (:type git :flavor melpa :files ("go-guru.el" "go-guru-pkg.el") :host github :repo "dominikh/go-mode.el" :package "go-guru" :local-repo "go-mode.el")) "gorepl-mode" ("2020-10-27 15:21:44" ("emacs" "s" "f" "hydra") (:type git :flavor melpa :host github :repo "manute/gorepl-mode" :package "gorepl-mode" :local-repo "gorepl-mode")) "go-tag" ("2020-10-27 15:21:44" ("emacs" "go-mode") (:type git :flavor melpa :host github :repo "brantou/emacs-go-tag" :package "go-tag" :local-repo "emacs-go-tag")) "go-gen-test" ("2020-10-27 15:21:44" ("emacs" "s") (:type git :flavor melpa :files (:defaults "go-gen-test.el" "go-gen-test-pkg.el") :host github :repo "s-kostyaev/go-gen-test" :package "go-gen-test" :local-repo "go-gen-test")) "company-go" ("2020-10-27 15:21:44" ("company" "go-mode") (:type git :flavor melpa :files ("emacs-company/company-go.el" "company-go-pkg.el") :host github :repo "mdempsky/gocode" :package "company-go" :local-repo "gocode")) "flycheck-golangci-lint" ("2020-10-27 15:21:44" ("emacs" "flycheck") (:type git :flavor melpa :host github :repo "weijiangan/flycheck-golangci-lint" :package "flycheck-golangci-lint" :local-repo "flycheck-golangci-lint")) "android-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "remvee/android-mode" :package "android-mode" :local-repo "android-mode")) "groovy-mode" ("2020-10-27 15:21:44" ("s" "emacs" "dash") (:type git :flavor melpa :files ("*groovy*.el" "groovy-mode-pkg.el") :host github :repo "Groovy-Emacs-Modes/groovy-emacs-modes" :package "groovy-mode" :local-repo "groovy-emacs-modes")) "meghanada" ("2020-10-27 15:21:44" ("emacs" "yasnippet" "company" "flycheck") (:type git :flavor melpa :host github :repo "mopemope/meghanada-emacs" :package "meghanada" :local-repo "meghanada-emacs")) "coffee-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "defunkt/coffee-mode" :package "coffee-mode" :local-repo "coffee-mode")) "js2-mode" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "mooz/js2-mode" :package "js2-mode" :local-repo "js2-mode")) "rjsx-mode" ("2020-10-27 15:21:44" ("emacs" "js2-mode") (:type git :flavor melpa :host github :repo "felipeochoa/rjsx-mode" :package "rjsx-mode" :local-repo "rjsx-mode")) "typescript-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "emacs-typescript/typescript.el" :package "typescript-mode" :local-repo "typescript.el")) "js2-refactor" ("2020-10-27 15:21:44" ("js2-mode" "s" "multiple-cursors" "dash" "s" "yasnippet") (:type git :flavor melpa :host github :repo "magnars/js2-refactor.el" :package "js2-refactor" :local-repo "js2-refactor.el")) "multiple-cursors" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :host github :repo "magnars/multiple-cursors.el" :package "multiple-cursors" :local-repo "multiple-cursors.el")) "npm-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "mojochao/npm-mode" :package "npm-mode" :local-repo "npm-mode")) "add-node-modules-path" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "codesuki/add-node-modules-path" :package "add-node-modules-path" :local-repo "add-node-modules-path")) "nodejs-repl" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "abicky/nodejs-repl.el" :package "nodejs-repl" :local-repo "nodejs-repl.el")) "skewer-mode" ("2020-10-27 15:21:44" ("simple-httpd" "js2-mode" "emacs") (:type git :flavor melpa :files ("*.html" "*.js" "*.el" "skewer-mode-pkg.el") :host github :repo "skeeto/skewer-mode" :package "skewer-mode" :local-repo "skewer-mode")) "simple-httpd" ("2020-10-27 15:21:44" ("cl-lib") (:type git :flavor melpa :host github :repo "skeeto/emacs-web-server" :package "simple-httpd" :local-repo "emacs-web-server")) "tide" ("2020-10-27 15:21:44" ("emacs" "dash" "s" "flycheck" "typescript-mode" "cl-lib") (:type git :flavor melpa :files (:defaults "tsserver" "tide-pkg.el") :host github :repo "ananthakumaran/tide" :package "tide" :local-repo "tide")) "xref-js2" ("2020-10-27 15:21:44" ("emacs" "js2-mode") (:type git :flavor melpa :host github :repo "NicolasPetton/xref-js2" :package "xref-js2" :local-repo "xref-js2")) "auctex" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :host github :repo "emacs-straight/auctex" :files ("*" (:exclude ".git")) :package "auctex" :local-repo "auctex")) "adaptive-wrap" ("2020-10-27 15:21:44" nil (:type git :host github :repo "emacs-straight/adaptive-wrap" :files ("*" (:exclude ".git")) :package "adaptive-wrap" :local-repo "adaptive-wrap")) "latex-preview-pane" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("*.el" "*.txt" "latex-preview-pane-pkg.el") :host github :repo "jsinglet/latex-preview-pane" :package "latex-preview-pane" :local-repo "latex-preview-pane")) "evil-tex" ("2020-10-27 15:21:44" ("emacs" "evil" "auctex") (:type git :flavor melpa :host github :repo "iyefrat/evil-tex" :package "evil-tex" :local-repo "evil-tex")) "company-auctex" ("2020-10-27 15:21:44" ("yasnippet" "company" "auctex") (:type git :flavor melpa :host github :repo "alexeyr/company-auctex" :package "company-auctex" :local-repo "company-auctex")) "company-reftex" ("2020-10-27 15:21:44" ("emacs" "s" "company") (:type git :flavor melpa :host github :repo "TheBB/company-reftex" :package "company-reftex" :local-repo "company-reftex")) "company-math" ("2020-10-27 15:21:44" ("company" "math-symbol-lists") (:type git :flavor melpa :host github :repo "vspinu/company-math" :package "company-math" :local-repo "company-math")) "math-symbol-lists" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "vspinu/math-symbol-lists" :package "math-symbol-lists" :local-repo "math-symbol-lists")) "markdown-toc" ("2020-10-27 15:21:44" ("s" "dash" "markdown-mode") (:type git :flavor melpa :host github :repo "ardumont/markdown-toc" :package "markdown-toc" :local-repo "markdown-toc")) "edit-indirect" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/edit-indirect" :package "edit-indirect" :local-repo "edit-indirect")) "evil-markdown" ("2020-10-27 15:21:44" nil (:host github :repo "Somelauw/evil-markdown" :package "evil-markdown" :type git :local-repo "evil-markdown")) "org-mode" ("2020-10-27 15:21:44" nil (:host github :repo "emacs-straight/org-mode" :files ("*.el" "lisp/*.el" "contrib/lisp/*.el") :package "org-mode" :type git :local-repo "org-mode")) "htmlize" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "hniksic/emacs-htmlize" :package "htmlize" :local-repo "emacs-htmlize")) "org-yt" ("2020-10-27 15:21:44" nil (:host github :repo "TobiasZawada/org-yt" :package "org-yt" :type git :local-repo "org-yt")) "ox-clip" ("2020-10-27 15:21:44" ("org" "htmlize") (:type git :flavor melpa :host github :repo "jkitchin/ox-clip" :package "ox-clip" :local-repo "ox-clip")) "org" ("2020-10-27 15:21:44" nil (:local-repo nil :repo "https://code.orgmode.org/bzg/org-mode.git" :package "org" :type git)) "toc-org" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "snosov1/toc-org" :package "toc-org" :local-repo "toc-org")) "org-cliplink" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "rexim/org-cliplink" :package "org-cliplink" :local-repo "org-cliplink")) "evil-org" ("2020-10-27 15:21:44" ("emacs" "evil") (:host github :repo "hlissner/evil-org-mode" :flavor melpa :package "evil-org" :type git :local-repo "evil-org-mode")) "orgit" ("2020-10-27 15:21:44" ("emacs" "magit" "org") (:type git :flavor melpa :host github :repo "magit/orgit" :package "orgit" :local-repo "orgit")) "org-download" ("2020-10-27 15:21:44" ("emacs" "async") (:type git :flavor melpa :host github :repo "abo-abo/org-download" :package "org-download" :local-repo "org-download")) "centered-window" ("2020-10-27 15:21:44" ("emacs") (:host github :repo "anler/centered-window-mode" :flavor melpa :package "centered-window" :type git :local-repo "centered-window-mode")) "org-tree-slide" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "takaxp/org-tree-slide" :package "org-tree-slide" :local-repo "org-tree-slide")) "org-re-reveal" ("2020-10-27 15:21:44" ("emacs" "org" "htmlize") (:type git :flavor melpa :host gitlab :repo "oer/org-re-reveal" :package "org-re-reveal" :local-repo "org-re-reveal")) "revealjs" ("2020-10-27 15:21:44" nil (:host github :repo "hakimel/reveal.js" :files ("css" "dist" "js" "plugin") :package "revealjs" :type git :local-repo "reveal.js")) "ob-async" ("2020-10-27 15:21:44" ("async" "org" "emacs" "dash") (:type git :flavor melpa :host github :repo "astahlman/ob-async" :package "ob-async" :local-repo "ob-async")) "ob-go" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "pope/ob-go" :package "ob-go" :local-repo "ob-go")) "pip-requirements" ("2020-10-27 15:21:44" ("dash") (:type git :flavor melpa :host github :repo "Wilfred/pip-requirements.el" :package "pip-requirements" :local-repo "pip-requirements.el")) "anaconda-mode" ("2020-10-27 15:21:44" ("emacs" "pythonic" "dash" "s" "f") (:type git :flavor melpa :host github :repo "pythonic-emacs/anaconda-mode" :package "anaconda-mode" :local-repo "anaconda-mode")) "pythonic" ("2020-10-27 15:21:44" ("emacs" "s" "f") (:type git :flavor melpa :host github :repo "pythonic-emacs/pythonic" :package "pythonic" :local-repo "pythonic")) "company-anaconda" ("2020-10-27 15:21:44" ("company" "anaconda-mode" "cl-lib" "dash" "s") (:type git :flavor melpa :host github :repo "pythonic-emacs/company-anaconda" :package "company-anaconda" :local-repo "company-anaconda")) "pipenv" ("2020-10-27 15:21:44" ("emacs" "f" "s" "pyvenv") (:type git :flavor melpa :host github :repo "pwalsh/pipenv.el" :package "pipenv" :local-repo "pipenv.el")) "pyvenv" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "jorgenschaefer/pyvenv" :package "pyvenv" :local-repo "pyvenv")) "nose" ("2020-10-27 15:21:44" nil (:host github :repo "emacsattic/nose" :package "nose" :type git :local-repo "nose")) "python-pytest" ("2020-10-27 15:21:44" ("emacs" "dash" "dash-functional" "transient" "projectile" "s") (:type git :flavor melpa :host github :repo "wbolster/emacs-python-pytest" :package "python-pytest" :local-repo "emacs-python-pytest")) "pyimport" ("2020-10-27 15:21:44" ("dash" "s" "shut-up") (:type git :flavor melpa :host github :repo "Wilfred/pyimport" :package "pyimport" :local-repo "pyimport")) "shut-up" ("2020-10-27 15:21:44" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "cask/shut-up" :package "shut-up" :local-repo "shut-up")) "py-isort" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "paetzke/py-isort.el" :package "py-isort" :local-repo "py-isort.el")) "qml-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "coldnew/qml-mode" :package "qml-mode" :local-repo "qml-mode")) "qt-pro-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "EricCrosson/qt-pro-mode" :package "qt-pro-mode" :local-repo "qt-pro-mode")) "company-shell" ("2020-10-27 15:21:44" ("emacs" "company" "dash" "cl-lib") (:type git :flavor melpa :files ("company-shell.el" "company-shell-pkg.el") :host github :repo "Alexander-Miller/company-shell" :package "company-shell" :local-repo "company-shell")) "emmet-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "smihica/emmet-mode" :package "emmet-mode" :local-repo "emmet-mode")) "haml-mode" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "nex3/haml-mode" :package "haml-mode" :local-repo "haml-mode")) "pug-mode" ("2020-10-27 15:21:44" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/emacs-pug-mode" :package "pug-mode" :local-repo "emacs-pug-mode")) "slim-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "slim-template/emacs-slim" :package "slim-mode" :local-repo "emacs-slim")) "web-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "fxbois/web-mode" :package "web-mode" :local-repo "web-mode")) "company-web" ("2020-10-27 15:21:44" ("company" "dash" "cl-lib" "web-completion-data") (:type git :flavor melpa :host github :repo "osv/company-web" :package "company-web" :local-repo "company-web")) "web-completion-data" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("*.el" "html-stuff" "web-completion-data-pkg.el") :host github :repo "osv/web-completion-data" :package "web-completion-data" :local-repo "web-completion-data")) "sass-mode" ("2020-10-27 15:21:44" ("haml-mode" "cl-lib") (:type git :flavor melpa :host github :repo "nex3/sass-mode" :package "sass-mode" :local-repo "sass-mode")) "stylus-mode" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("stylus-mode.el" "stylus-mode-pkg.el") :host github :repo "brianc/jade-mode" :package "stylus-mode" :local-repo "jade-mode")) "sws-mode" ("2020-10-27 15:21:44" nil (:flavor melpa :files ("sws-mode.el" "sws-mode-pkg.el") :package "sws-mode" :local-repo "jade-mode" :type git :repo "brianc/jade-mode" :host github)) "rainbow-mode" ("2020-10-27 15:21:44" nil (:type git :host github :repo "emacs-straight/rainbow-mode" :files ("*" (:exclude ".git")) :package "rainbow-mode" :local-repo "rainbow-mode")) "counsel-css" ("2020-10-27 15:21:44" ("emacs" "counsel" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/emacs-counsel-css" :package "counsel-css" :local-repo "emacs-counsel-css")) "org-msg" ("2020-10-27 15:21:44" ("emacs" "htmlize") (:type git :flavor melpa :host github :repo "jeremy-compostella/org-msg" :package "org-msg" :local-repo "org-msg")) "calfw" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("calfw.el" "calfw-pkg.el") :host github :repo "kiwanami/emacs-calfw" :package "calfw" :local-repo "emacs-calfw")) "calfw-org" ("2020-10-27 15:21:44" nil (:flavor melpa :files ("calfw-org.el" "calfw-org-pkg.el") :package "calfw-org" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "calfw-cal" ("2020-10-27 15:21:44" nil (:flavor melpa :files ("calfw-cal.el" "calfw-cal-pkg.el") :package "calfw-cal" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "calfw-ical" ("2020-10-27 15:21:44" nil (:flavor melpa :files ("calfw-ical.el" "calfw-ical-pkg.el") :package "calfw-ical" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "org-gcal" ("2020-10-27 15:21:44" ("request" "request-deferred" "alert" "persist" "emacs") (:type git :flavor melpa :host github :repo "kidd/org-gcal.el" :package "org-gcal" :local-repo "org-gcal.el")) "request-deferred" ("2020-10-27 15:21:44" ("deferred" "request") (:flavor melpa :files ("request-deferred.el" "request-deferred-pkg.el") :package "request-deferred" :local-repo "emacs-request" :type git :repo "tkf/emacs-request" :host github)) "alert" ("2020-10-27 15:21:44" ("gntp" "log4e" "cl-lib") (:type git :flavor melpa :host github :repo "jwiegley/alert" :package "alert" :local-repo "alert")) "gntp" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "tekai/gntp.el" :package "gntp" :local-repo "gntp.el")) "log4e" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "aki2o/log4e" :package "log4e" :local-repo "log4e")) "persist" ("2020-10-27 15:21:44" nil (:type git :host github :repo "emacs-straight/persist" :files ("*" (:exclude ".git")) :package "persist" :local-repo "persist")) "drag-stuff" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "rejeep/drag-stuff.el" :package "drag-stuff" :local-repo "drag-stuff.el")) "link-hint" ("2020-10-27 15:21:44" ("avy" "emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/link-hint.el" :package "link-hint" :local-repo "link-hint.el")) "org-super-agenda" ("2020-10-27 15:21:44" ("emacs" "s" "dash" "org" "ht" "ts") (:type git :flavor melpa :host github :repo "alphapapa/org-super-agenda" :package "org-super-agenda" :local-repo "org-super-agenda")) "ts" ("2020-10-27 15:21:44" ("emacs" "dash" "s") (:type git :flavor melpa :host github :repo "alphapapa/ts.el" :package "ts" :local-repo "ts.el")) "command-log-mode" ("2020-10-27 15:21:44" nil (:host github :repo "lewang/command-log-mode" :files ("command-log-mode.el") :flavor melpa :package "command-log-mode" :type git :local-repo "command-log-mode")) "focus-autosave-mode" ("2020-10-27 15:21:44" ("emacs") (:type git :flavor melpa :host github :repo "Vifon/focus-autosave-mode.el" :package "focus-autosave-mode" :local-repo "focus-autosave-mode.el")) "jupyter" ("2020-10-27 15:21:44" ("emacs" "zmq" "cl-lib" "simple-httpd" "websocket") (:type git :flavor melpa :files (:defaults "Makefile" "widget.html" "js" "jupyter-pkg.el") :host github :repo "dzop/emacs-jupyter" :package "jupyter" :local-repo "emacs-jupyter")) "zmq" ("2020-10-27 15:21:44" ("cl-lib" "emacs") (:type git :flavor melpa :files (:defaults "Makefile" "src" "zmq-pkg.el") :host github :repo "dzop/emacs-zmq" :package "zmq" :local-repo "emacs-zmq")) "pynt" ("2020-10-27 15:21:44" ("emacs" "ein" "epc" "deferred") (:type git :flavor melpa :files ("pynt/*" "pynt-pkg.el") :host github :repo "ebanner/pynt" :package "pynt" :local-repo "pynt")) "epc" ("2020-10-27 15:21:44" ("concurrent" "ctable") (:type git :flavor melpa :files ("epc.el" "epcs.el" "epc-pkg.el") :host github :repo "kiwanami/emacs-epc" :package "epc" :local-repo "emacs-epc")) "concurrent" ("2020-10-27 15:21:44" ("emacs" "deferred") (:flavor melpa :files ("concurrent.el" "concurrent-pkg.el") :package "concurrent" :local-repo "emacs-deferred" :type git :repo "kiwanami/emacs-deferred" :host github)) "ctable" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :files ("ctable.el" "ctable-pkg.el") :host github :repo "kiwanami/emacs-ctable" :package "ctable" :local-repo "emacs-ctable")) "elpy" ("2020-10-27 15:21:44" ("company" "emacs" "highlight-indentation" "pyvenv" "yasnippet" "s") (:type git :flavor melpa :files ("*.el" "NEWS.rst" "snippets" "elpy" "elpy-pkg.el") :host github :repo "jorgenschaefer/elpy" :package "elpy" :local-repo "elpy")) "highlight-indentation" ("2020-10-27 15:21:44" nil (:type git :flavor melpa :host github :repo "antonj/Highlight-Indentation-for-Emacs" :package "highlight-indentation" :local-repo "Highlight-Indentation-for-Emacs"))))

#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())

#s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (org-elpa #s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 1 "auto-minor-mode" nil "gcmh" nil "explain-pause-mode" nil "straight" nil "use-package" nil "all-the-icons" nil "hide-mode-line" nil "highlight-numbers" nil "rainbow-delimiters" nil "restart-emacs" nil "better-jumper" nil "dtrt-indent" nil "helpful" nil "pcre2el" nil "smartparens" nil "ws-butler" nil "projectile" nil "general" nil "which-key" nil "company" nil "company-dict" nil "swiper" nil "amx" nil "counsel-projectile" nil "ivy-rich" nil "wgrep" nil "doom-themes" nil "solaire-mode" nil "hl-todo" nil "doom-modeline" nil "anzu" nil "evil-anzu" nil "nav-flash" nil "evil-goggles" nil "treemacs" nil "unicode-fonts" nil "git-gutter-fringe" nil "vi-tilde-fringe" nil "ace-window" nil "persp-mode" nil "evil" nil "evil-args" nil "evil-easymotion" nil "evil-embrace" nil "evil-escape" nil "evil-exchange" nil "evil-indent-plus" nil "evil-lion" nil "evil-nerd-commenter" nil "evil-numbers" nil "evil-snipe" nil "evil-surround" nil "evil-textobj-anyblock" nil "evil-traces" nil "evil-visualstar" nil "exato" nil "evil-quick-diff" nil "evil-collection" nil "yasnippet" nil "vimish-fold" nil "evil-vimish-fold" nil "iedit" nil "evil-multiedit" nil "evil-mc" nil "rotate-text" nil "auto-yasnippet" nil "doom-snippets" nil "diredfl" nil "dired-git-info" nil "diff-hl" nil "dired-rsync" nil "fd-dired" nil "ibuffer-projectile" nil "ibuffer-vc" nil "browse-at-remote" nil "git-commit" nil "git-timemachine" nil "gitconfig-mode" nil "gitignore-mode" nil "eshell-up" nil "eshell-z" nil "shrink-path" nil "esh-help" nil "eshell-did-you-mean" nil "fish-completion" nil "bash-completion" nil "multi-term" nil "vterm" nil "flycheck" nil "flycheck-popup-tip" nil "spell-fu" nil "realgud" nil "realgud-trepan-ni" nil "editorconfig" nil "ein" nil "quickrun" nil "eros" nil "dumb-jump" nil "ivy-xref" nil "request" nil "dash-docs" nil "counsel-dash" nil "lsp-mode" nil "lsp-ui" nil "lsp-ivy" nil "magit" nil "magit-gitflow" nil "magit-todos" nil "github-review" nil "evil-magit" nil "cmake-mode" nil "cuda-mode" nil "demangle-mode" nil "disaster" nil "modern-cpp-font-lock" nil "opencl-mode" nil "glsl-mode" nil "company-glsl" nil "irony" nil "irony-eldoc" nil "flycheck-irony" nil "company-irony" nil "company-irony-c-headers" nil "rtags" nil "csharp-mode" nil "csproj-mode" nil "omnisharp" nil "csv-mode" nil "highlight-quoted" nil "macrostep" nil "overseer" nil "elisp-def" nil "elisp-demos" nil "flycheck-cask" nil "buttercup" nil "go-eldoc" nil "go-guru" nil "go-mode" nil "gorepl-mode" nil "go-tag" nil "go-gen-test" nil "company-go" nil "flycheck-golangci-lint" nil "android-mode" nil "groovy-mode" nil "meghanada" nil "coffee-mode" nil "js2-mode" nil "rjsx-mode" nil "typescript-mode" nil "js2-refactor" nil "npm-mode" nil "add-node-modules-path" nil "nodejs-repl" nil "skewer-mode" nil "tide" nil "xref-js2" nil "auctex" nil "adaptive-wrap" nil "latex-preview-pane" nil "evil-tex" nil "company-auctex" nil "company-reftex" nil "company-math" nil "markdown-mode" nil "markdown-toc" nil "edit-indirect" nil "evil-markdown" nil "org-mode" nil "avy" nil "htmlize" nil "org-yt" nil "ox-clip" nil "toc-org" nil "org-cliplink" nil "evil-org" nil "orgit" nil "org-download" nil "centered-window" nil "org-tree-slide" nil "org-re-reveal" nil "revealjs" nil "ob-async" nil "ob-go" nil "pip-requirements" nil "anaconda-mode" nil "company-anaconda" nil "pipenv" nil "pyvenv" nil "nose" nil "python-pytest" nil "pyimport" nil "py-isort" nil "qml-mode" nil "qt-pro-mode" nil "company-shell" nil "emmet-mode" nil "haml-mode" nil "pug-mode" nil "slim-mode" nil "web-mode" nil "company-web" nil "sass-mode" nil "stylus-mode" nil "sws-mode" nil "rainbow-mode" nil "counsel-css" nil "org-msg" nil "calfw" nil "calfw-org" nil "calfw-cal" nil "calfw-ical" nil "org-gcal" nil "drag-stuff" nil "link-hint" nil "memoize" nil "parent-mode" nil "dash" nil "dash-functional" nil "s" nil "f" nil "elisp-refs" nil "cl-lib" nil "pkg-info" nil "epl" nil "hydra" nil "lv" nil "goto-chg" nil "pfuture" nil "ht" nil "async" nil "transient" nil "with-editor" nil "font-utils" nil "persistent-soft" nil "pcache" nil "eieio" nil "list-utils" nil "ucs-utils" nil "git-gutter" nil "fringe-helper" nil "embrace" nil "expand-region" nil "annalist" nil "seq" nil "popup" nil "load-relative" nil "loc-changes" nil "test-simple" nil "websocket" nil "anaphora" nil "deferred" nil "polymode" nil "exec-path-from-shell" nil "spinner" nil "magit-popup" nil "ghub" nil "treepy" nil "a" nil "json" nil "auto-complete" nil "multiple-cursors" nil "simple-httpd" nil "math-symbol-lists" nil "org" (org :type git :repo "https://code.orgmode.org/bzg/org-mode.git" :local-repo "org") "pythonic" nil "shut-up" nil "web-completion-data" nil "request-deferred" nil "alert" nil "gntp" nil "log4e" nil "persist" nil "ts" nil "command-log-mode" nil "zmq" nil "epc" nil "concurrent" nil "ctable" nil "highlight-indentation" nil "melpa" nil "gnu-elpa-mirror" nil "emacsmirror-mirror" nil "bind-key" nil "ivy" nil "ivy-hydra" nil "counsel" nil "treemacs-evil" nil "treemacs-projectile" nil "treemacs-magit" nil "treemacs-persp" nil "ivy-rtags" nil "org-super-agenda" nil "focus-autosave-mode" nil "jupyter" nil "pynt" nil "elpy" nil)) melpa #s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "auto-minor-mode" (auto-minor-mode :type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode") "gcmh" (gcmh :type git :flavor melpa :host gitlab :repo "koral/gcmh") "explain-pause-mode" nil "straight" nil "use-package" (use-package :type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package") "all-the-icons" (all-the-icons :type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el") "hide-mode-line" (hide-mode-line :type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line") "highlight-numbers" (highlight-numbers :type git :flavor melpa :host github :repo "Fanael/highlight-numbers") "rainbow-delimiters" (rainbow-delimiters :type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters") "restart-emacs" (restart-emacs :type git :flavor melpa :host github :repo "iqbalansari/restart-emacs") "better-jumper" (better-jumper :type git :flavor melpa :host github :repo "gilbertw1/better-jumper") "dtrt-indent" (dtrt-indent :type git :flavor melpa :host github :repo "jscheid/dtrt-indent") "helpful" (helpful :type git :flavor melpa :host github :repo "Wilfred/helpful") "pcre2el" (pcre2el :type git :flavor melpa :files ("pcre2el.el" "pcre2el-pkg.el") :host github :repo "joddie/pcre2el") "smartparens" (smartparens :type git :flavor melpa :host github :repo "Fuco1/smartparens") "ws-butler" (ws-butler :type git :flavor melpa :host github :repo "lewang/ws-butler") "projectile" (projectile :type git :flavor melpa :files ("projectile.el" "projectile-pkg.el") :host github :repo "bbatsov/projectile") "general" (general :type git :flavor melpa :host github :repo "noctuid/general.el") "which-key" (which-key :type git :flavor melpa :host github :repo "justbur/emacs-which-key") "company" (company :type git :flavor melpa :host github :repo "company-mode/company-mode") "company-dict" (company-dict :type git :flavor melpa :host github :repo "hlissner/emacs-company-dict") "swiper" (swiper :type git :flavor melpa :files ("swiper.el" "swiper-pkg.el") :host github :repo "abo-abo/swiper") "amx" (amx :type git :flavor melpa :host github :repo "DarwinAwardWinner/amx") "counsel-projectile" (counsel-projectile :type git :flavor melpa :host github :repo "ericdanan/counsel-projectile") "ivy-rich" (ivy-rich :type git :flavor melpa :files ("*.el" "ivy-rich-pkg.el") :host github :repo "Yevgnen/ivy-rich") "wgrep" (wgrep :type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep") "doom-themes" (doom-themes :type git :flavor melpa :files (:defaults "themes/*.el" "doom-themes-pkg.el") :host github :repo "hlissner/emacs-doom-themes") "solaire-mode" (solaire-mode :type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode") "hl-todo" (hl-todo :type git :flavor melpa :host github :repo "tarsius/hl-todo") "doom-modeline" (doom-modeline :type git :flavor melpa :host github :repo "seagle0128/doom-modeline") "anzu" (anzu :type git :flavor melpa :host github :repo "emacsorphanage/anzu") "evil-anzu" (evil-anzu :type git :flavor melpa :host github :repo "emacsorphanage/evil-anzu") "nav-flash" (nav-flash :type git :flavor melpa :host github :repo "rolandwalker/nav-flash") "evil-goggles" (evil-goggles :type git :flavor melpa :host github :repo "edkolev/evil-goggles") "treemacs" (treemacs :type git :flavor melpa :files (:defaults "Changelog.org" "icons" "src/elisp/treemacs*.el" "src/scripts/treemacs*.py" (:exclude "src/extra/*") "treemacs-pkg.el") :host github :repo "Alexander-Miller/treemacs") "unicode-fonts" (unicode-fonts :type git :flavor melpa :host github :repo "rolandwalker/unicode-fonts") "git-gutter-fringe" (git-gutter-fringe :type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe") "vi-tilde-fringe" (vi-tilde-fringe :type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe") "ace-window" (ace-window :type git :flavor melpa :host github :repo "abo-abo/ace-window") "persp-mode" (persp-mode :type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el") "evil" (evil :type git :flavor melpa :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil") "evil-args" (evil-args :type git :flavor melpa :host github :repo "wcsmith/evil-args") "evil-easymotion" (evil-easymotion :type git :flavor melpa :host github :repo "PythonNut/evil-easymotion") "evil-embrace" (evil-embrace :type git :flavor melpa :host github :repo "cute-jumper/evil-embrace.el") "evil-escape" (evil-escape :type git :flavor melpa :host github :repo "syl20bnr/evil-escape") "evil-exchange" (evil-exchange :type git :flavor melpa :host github :repo "Dewdrops/evil-exchange") "evil-indent-plus" (evil-indent-plus :type git :flavor melpa :host github :repo "TheBB/evil-indent-plus") "evil-lion" (evil-lion :type git :flavor melpa :files ("evil-lion.el" "evil-lion-pkg.el") :host github :repo "edkolev/evil-lion") "evil-nerd-commenter" (evil-nerd-commenter :type git :flavor melpa :host github :repo "redguardtoo/evil-nerd-commenter") "evil-numbers" (evil-numbers :type git :flavor melpa :host github :repo "cofi/evil-numbers") "evil-snipe" (evil-snipe :type git :flavor melpa :host github :repo "hlissner/evil-snipe") "evil-surround" (evil-surround :type git :flavor melpa :host github :repo "emacs-evil/evil-surround") "evil-textobj-anyblock" (evil-textobj-anyblock :type git :flavor melpa :host github :repo "noctuid/evil-textobj-anyblock") "evil-traces" (evil-traces :type git :flavor melpa :host github :repo "mamapanda/evil-traces") "evil-visualstar" (evil-visualstar :type git :flavor melpa :host github :repo "bling/evil-visualstar") "exato" (exato :type git :flavor melpa :host github :repo "ninrod/exato") "evil-quick-diff" nil "evil-collection" (evil-collection :type git :flavor melpa :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection") "yasnippet" (yasnippet :type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet") "vimish-fold" (vimish-fold :type git :flavor melpa :host github :repo "seregaxvm/vimish-fold") "evil-vimish-fold" (evil-vimish-fold :type git :flavor melpa :host github :repo "alexmurray/evil-vimish-fold") "iedit" (iedit :type git :flavor melpa :host github :repo "victorhge/iedit") "evil-multiedit" (evil-multiedit :type git :flavor melpa :host github :repo "hlissner/evil-multiedit") "evil-mc" (evil-mc :type git :flavor melpa :host github :repo "gabesoft/evil-mc") "rotate-text" nil "auto-yasnippet" (auto-yasnippet :type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet") "doom-snippets" nil "diredfl" (diredfl :type git :flavor melpa :host github :repo "purcell/diredfl") "dired-git-info" nil "diff-hl" (diff-hl :type git :flavor melpa :host github :repo "dgutov/diff-hl") "dired-rsync" (dired-rsync :type git :flavor melpa :host github :repo "stsquad/dired-rsync") "fd-dired" (fd-dired :type git :flavor melpa :host github :repo "yqrashawn/fd-dired") "ibuffer-projectile" (ibuffer-projectile :type git :flavor melpa :host github :repo "purcell/ibuffer-projectile") "ibuffer-vc" (ibuffer-vc :type git :flavor melpa :host github :repo "purcell/ibuffer-vc") "browse-at-remote" (browse-at-remote :type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote") "git-commit" (git-commit :type git :flavor melpa :files ("lisp/git-commit.el" "git-commit-pkg.el") :host github :repo "magit/magit") "git-timemachine" (git-timemachine :type git :flavor melpa :host gitlab :repo "pidu/git-timemachine") "gitconfig-mode" (gitconfig-mode :type git :flavor melpa :files ("gitconfig-mode.el" "gitconfig-mode-pkg.el") :host github :repo "magit/git-modes") "gitignore-mode" (gitignore-mode :type git :flavor melpa :files ("gitignore-mode.el" "gitignore-mode-pkg.el") :host github :repo "magit/git-modes") "eshell-up" (eshell-up :type git :flavor melpa :host github :repo "peterwvj/eshell-up") "eshell-z" (eshell-z :type git :flavor melpa :host github :repo "xuchunyang/eshell-z") "shrink-path" (shrink-path :type git :flavor melpa :host gitlab :repo "bennya/shrink-path.el") "esh-help" (esh-help :type git :flavor melpa :host github :repo "tom-tan/esh-help") "eshell-did-you-mean" (eshell-did-you-mean :type git :flavor melpa :host github :repo "xuchunyang/eshell-did-you-mean") "fish-completion" (fish-completion :type git :flavor melpa :host gitlab :repo "Ambrevar/emacs-fish-completion") "bash-completion" (bash-completion :type git :flavor melpa :host github :repo "szermatt/emacs-bash-completion") "multi-term" (multi-term :type git :flavor melpa :host github :repo "manateelazycat/multi-term") "vterm" (vterm :type git :flavor melpa :files ("*" (:exclude ".dir-locals.el" ".gitignore" ".clang-format" ".travis.yml") "vterm-pkg.el") :host github :repo "akermu/emacs-libvterm") "flycheck" (flycheck :type git :flavor melpa :host github :repo "flycheck/flycheck") "flycheck-popup-tip" (flycheck-popup-tip :type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip") "spell-fu" (spell-fu :type git :flavor melpa :host gitlab :repo "ideasman42/emacs-spell-fu") "realgud" (realgud :type git :flavor melpa :files ("realgud.el" "realgud/.nosearch" "realgud-recursive-autoloads.el" ("realgud/common" "realgud/common/*.el") ("realgud/common/buffer" "realgud/common/buffer/*.el") ("realgud/debugger/bashdb" "realgud/debugger/bashdb/*.el") ("realgud/debugger/gdb" "realgud/debugger/gdb/*.el") ("realgud/debugger/gub" "realgud/debugger/gub/*.el") ("realgud/debugger/ipdb" "realgud/debugger/ipdb/*.el") ("realgud/debugger/jdb" "realgud/debugger/jdb/*.el") ("realgud/debugger/kshdb" "realgud/debugger/kshdb/*.el") ("realgud/debugger/nodejs" "realgud/debugger/nodejs/*.el") ("realgud/debugger/pdb" "realgud/debugger/pdb/*.el") ("realgud/debugger/perldb" "realgud/debugger/perldb/*.el") ("realgud/debugger/rdebug" "realgud/debugger/rdebug/*.el") ("realgud/debugger/remake" "realgud/debugger/remake/*.el") ("realgud/debugger/trepan" "realgud/debugger/trepan/*.el") ("realgud/debugger/trepan.pl" "realgud/debugger/trepan.pl/*.el") ("realgud/debugger/trepan2" "realgud/debugger/trepan2/*.el") ("realgud/debugger/trepan3k" "realgud/debugger/trepan3k/*.el") ("realgud/debugger/trepanjs" "realgud/debugger/trepanjs/*.el") ("realgud/debugger/zshdb" "realgud/debugger/zshdb/*.el") ("realgud/lang" "realgud/lang/*.el") "realgud-pkg.el") :host github :repo "realgud/realgud") "realgud-trepan-ni" (realgud-trepan-ni :type git :flavor melpa :files (:defaults ("trepan-ni" "trepan-ni/*.el") "realgud-trepan-ni-pkg.el") :host github :repo "realgud/realgud-trepan-ni") "editorconfig" (editorconfig :type git :flavor melpa :host github :repo "editorconfig/editorconfig-emacs") "ein" (ein :type git :flavor melpa :files ("lisp/*" (:exclude "lisp/zeroein.el") "ein-pkg.el") :host github :repo "millejoh/emacs-ipython-notebook") "quickrun" (quickrun :type git :flavor melpa :host github :repo "emacsorphanage/quickrun") "eros" (eros :type git :flavor melpa :host github :repo "xiongtx/eros") "dumb-jump" (dumb-jump :type git :flavor melpa :host github :repo "jacktasia/dumb-jump") "ivy-xref" (ivy-xref :type git :flavor melpa :host github :repo "alexmurray/ivy-xref") "request" (request :type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request") "dash-docs" (dash-docs :type git :flavor melpa :host github :repo "dash-docs-el/dash-docs") "counsel-dash" (counsel-dash :type git :flavor melpa :host github :repo "dash-docs-el/counsel-dash") "lsp-mode" (lsp-mode :type git :flavor melpa :files (:defaults "clients/*.el" "lsp-mode-pkg.el") :host github :repo "emacs-lsp/lsp-mode") "lsp-ui" (lsp-ui :type git :flavor melpa :files (:defaults "lsp-ui-doc.html" "resources/*" "lsp-ui-pkg.el") :host github :repo "emacs-lsp/lsp-ui") "lsp-ivy" (lsp-ivy :type git :flavor melpa :host github :repo "emacs-lsp/lsp-ivy") "magit" (magit :type git :flavor melpa :files ("lisp/magit" "lisp/magit*.el" "lisp/git-rebase.el" "Documentation/magit.texi" "Documentation/AUTHORS.md" "LICENSE" (:exclude "lisp/magit-libgit.el") "magit-pkg.el") :host github :repo "magit/magit") "magit-gitflow" (magit-gitflow :type git :flavor melpa :host github :repo "jtatarik/magit-gitflow") "magit-todos" (magit-todos :type git :flavor melpa :host github :repo "alphapapa/magit-todos") "github-review" (github-review :type git :flavor melpa :host github :repo "charignon/github-review") "evil-magit" (evil-magit :type git :flavor melpa :host github :repo "emacs-evil/evil-magit") "cmake-mode" (cmake-mode :type git :flavor melpa :files ("Auxiliary/*.el" "cmake-mode-pkg.el") :repo "https://gitlab.kitware.com/cmake/cmake.git") "cuda-mode" (cuda-mode :type git :flavor melpa :host github :repo "chachi/cuda-mode") "demangle-mode" (demangle-mode :type git :flavor melpa :host github :repo "liblit/demangle-mode") "disaster" (disaster :type git :flavor melpa :files ("disaster.el" "disaster-pkg.el") :host github :repo "jart/disaster") "modern-cpp-font-lock" (modern-cpp-font-lock :type git :flavor melpa :host github :repo "ludwigpacifici/modern-cpp-font-lock") "opencl-mode" (opencl-mode :type git :flavor melpa :host github :repo "salmanebah/opencl-mode") "glsl-mode" (glsl-mode :type git :flavor melpa :host github :repo "jimhourihan/glsl-mode") "company-glsl" (company-glsl :type git :flavor melpa :host github :repo "guidoschmidt/company-glsl") "irony" (irony :type git :flavor melpa :files ("*.el" "server" "irony-pkg.el") :host github :repo "Sarcasm/irony-mode") "irony-eldoc" (irony-eldoc :type git :flavor melpa :host github :repo "ikirill/irony-eldoc") "flycheck-irony" (flycheck-irony :type git :flavor melpa :host github :repo "Sarcasm/flycheck-irony") "company-irony" (company-irony :type git :flavor melpa :host github :repo "Sarcasm/company-irony") "company-irony-c-headers" (company-irony-c-headers :type git :flavor melpa :host github :repo "hotpxl/company-irony-c-headers") "rtags" (rtags :type git :flavor melpa :files ("src/rtags.el" "rtags-pkg.el") :host github :repo "Andersbakken/rtags") "csharp-mode" (csharp-mode :type git :flavor melpa :host github :repo "josteink/csharp-mode") "csproj-mode" (csproj-mode :type git :flavor melpa :files (:defaults "snippets" "csproj-mode-pkg.el") :host github :repo "omajid/csproj-mode") "omnisharp" (omnisharp :type git :flavor melpa :host github :repo "OmniSharp/omnisharp-emacs") "csv-mode" nil "highlight-quoted" (highlight-quoted :type git :flavor melpa :host github :repo "Fanael/highlight-quoted") "macrostep" (macrostep :type git :flavor melpa :host github :repo "joddie/macrostep") "overseer" (overseer :type git :flavor melpa :host github :repo "tonini/overseer.el") "elisp-def" (elisp-def :type git :flavor melpa :host github :repo "Wilfred/elisp-def") "elisp-demos" (elisp-demos :type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos") "flycheck-cask" (flycheck-cask :type git :flavor melpa :host github :repo "flycheck/flycheck-cask") "buttercup" (buttercup :type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup") "go-eldoc" (go-eldoc :type git :flavor melpa :host github :repo "emacsorphanage/go-eldoc") "go-guru" (go-guru :type git :flavor melpa :files ("go-guru.el" "go-guru-pkg.el") :host github :repo "dominikh/go-mode.el") "go-mode" (go-mode :type git :flavor melpa :files ("go-mode.el" "go-mode-pkg.el") :host github :repo "dominikh/go-mode.el") "gorepl-mode" (gorepl-mode :type git :flavor melpa :host github :repo "manute/gorepl-mode") "go-tag" (go-tag :type git :flavor melpa :host github :repo "brantou/emacs-go-tag") "go-gen-test" (go-gen-test :type git :flavor melpa :files (:defaults "go-gen-test.el" "go-gen-test-pkg.el") :host github :repo "s-kostyaev/go-gen-test") "company-go" (company-go :type git :flavor melpa :files ("emacs-company/company-go.el" "company-go-pkg.el") :host github :repo "mdempsky/gocode") "flycheck-golangci-lint" (flycheck-golangci-lint :type git :flavor melpa :host github :repo "weijiangan/flycheck-golangci-lint") "android-mode" (android-mode :type git :flavor melpa :host github :repo "remvee/android-mode") "groovy-mode" (groovy-mode :type git :flavor melpa :files ("*groovy*.el" "groovy-mode-pkg.el") :host github :repo "Groovy-Emacs-Modes/groovy-emacs-modes") "meghanada" (meghanada :type git :flavor melpa :host github :repo "mopemope/meghanada-emacs") "coffee-mode" (coffee-mode :type git :flavor melpa :host github :repo "defunkt/coffee-mode") "js2-mode" (js2-mode :type git :flavor melpa :host github :repo "mooz/js2-mode") "rjsx-mode" (rjsx-mode :type git :flavor melpa :host github :repo "felipeochoa/rjsx-mode") "typescript-mode" (typescript-mode :type git :flavor melpa :host github :repo "emacs-typescript/typescript.el") "js2-refactor" (js2-refactor :type git :flavor melpa :host github :repo "magnars/js2-refactor.el") "npm-mode" (npm-mode :type git :flavor melpa :host github :repo "mojochao/npm-mode") "add-node-modules-path" (add-node-modules-path :type git :flavor melpa :host github :repo "codesuki/add-node-modules-path") "nodejs-repl" (nodejs-repl :type git :flavor melpa :host github :repo "abicky/nodejs-repl.el") "skewer-mode" (skewer-mode :type git :flavor melpa :files ("*.html" "*.js" "*.el" "skewer-mode-pkg.el") :host github :repo "skeeto/skewer-mode") "tide" (tide :type git :flavor melpa :files (:defaults "tsserver" "tide-pkg.el") :host github :repo "ananthakumaran/tide") "xref-js2" (xref-js2 :type git :flavor melpa :host github :repo "NicolasPetton/xref-js2") "auctex" nil "adaptive-wrap" nil "latex-preview-pane" (latex-preview-pane :type git :flavor melpa :files ("*.el" "*.txt" "latex-preview-pane-pkg.el") :host github :repo "jsinglet/latex-preview-pane") "evil-tex" (evil-tex :type git :flavor melpa :host github :repo "iyefrat/evil-tex") "company-auctex" (company-auctex :type git :flavor melpa :host github :repo "alexeyr/company-auctex") "company-reftex" (company-reftex :type git :flavor melpa :host github :repo "TheBB/company-reftex") "company-math" (company-math :type git :flavor melpa :host github :repo "vspinu/company-math") "markdown-mode" (markdown-mode :type git :flavor melpa :host github :repo "jrblevin/markdown-mode") "markdown-toc" (markdown-toc :type git :flavor melpa :host github :repo "ardumont/markdown-toc") "edit-indirect" (edit-indirect :type git :flavor melpa :host github :repo "Fanael/edit-indirect") "evil-markdown" nil "org-mode" nil "avy" (avy :type git :flavor melpa :host github :repo "abo-abo/avy") "htmlize" (htmlize :type git :flavor melpa :host github :repo "hniksic/emacs-htmlize") "org-yt" nil "ox-clip" (ox-clip :type git :flavor melpa :host github :repo "jkitchin/ox-clip") "toc-org" (toc-org :type git :flavor melpa :host github :repo "snosov1/toc-org") "org-cliplink" (org-cliplink :type git :flavor melpa :host github :repo "rexim/org-cliplink") "evil-org" (evil-org :type git :flavor melpa :host github :repo "Somelauw/evil-org-mode") "orgit" (orgit :type git :flavor melpa :host github :repo "magit/orgit") "org-download" (org-download :type git :flavor melpa :host github :repo "abo-abo/org-download") "centered-window" (centered-window :type git :flavor melpa :host github :repo "anler/centered-window-mode") "org-tree-slide" (org-tree-slide :type git :flavor melpa :host github :repo "takaxp/org-tree-slide") "org-re-reveal" (org-re-reveal :type git :flavor melpa :host gitlab :repo "oer/org-re-reveal") "revealjs" nil "ob-async" (ob-async :type git :flavor melpa :host github :repo "astahlman/ob-async") "ob-go" (ob-go :type git :flavor melpa :host github :repo "pope/ob-go") "pip-requirements" (pip-requirements :type git :flavor melpa :host github :repo "Wilfred/pip-requirements.el") "anaconda-mode" (anaconda-mode :type git :flavor melpa :host github :repo "pythonic-emacs/anaconda-mode") "company-anaconda" (company-anaconda :type git :flavor melpa :host github :repo "pythonic-emacs/company-anaconda") "pipenv" (pipenv :type git :flavor melpa :host github :repo "pwalsh/pipenv.el") "pyvenv" (pyvenv :type git :flavor melpa :host github :repo "jorgenschaefer/pyvenv") "nose" nil "python-pytest" (python-pytest :type git :flavor melpa :host github :repo "wbolster/emacs-python-pytest") "pyimport" (pyimport :type git :flavor melpa :host github :repo "Wilfred/pyimport") "py-isort" (py-isort :type git :flavor melpa :host github :repo "paetzke/py-isort.el") "qml-mode" (qml-mode :type git :flavor melpa :host github :repo "coldnew/qml-mode") "qt-pro-mode" (qt-pro-mode :type git :flavor melpa :host github :repo "EricCrosson/qt-pro-mode") "company-shell" (company-shell :type git :flavor melpa :files ("company-shell.el" "company-shell-pkg.el") :host github :repo "Alexander-Miller/company-shell") "emmet-mode" (emmet-mode :type git :flavor melpa :host github :repo "smihica/emmet-mode") "haml-mode" (haml-mode :type git :flavor melpa :host github :repo "nex3/haml-mode") "pug-mode" (pug-mode :type git :flavor melpa :host github :repo "hlissner/emacs-pug-mode") "slim-mode" (slim-mode :type git :flavor melpa :host github :repo "slim-template/emacs-slim") "web-mode" (web-mode :type git :flavor melpa :host github :repo "fxbois/web-mode") "company-web" (company-web :type git :flavor melpa :host github :repo "osv/company-web") "sass-mode" (sass-mode :type git :flavor melpa :host github :repo "nex3/sass-mode") "stylus-mode" (stylus-mode :type git :flavor melpa :files ("stylus-mode.el" "stylus-mode-pkg.el") :host github :repo "brianc/jade-mode") "sws-mode" (sws-mode :type git :flavor melpa :files ("sws-mode.el" "sws-mode-pkg.el") :host github :repo "brianc/jade-mode") "rainbow-mode" nil "counsel-css" (counsel-css :type git :flavor melpa :host github :repo "hlissner/emacs-counsel-css") "org-msg" (org-msg :type git :flavor melpa :host github :repo "jeremy-compostella/org-msg") "calfw" (calfw :type git :flavor melpa :files ("calfw.el" "calfw-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-org" (calfw-org :type git :flavor melpa :files ("calfw-org.el" "calfw-org-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-cal" (calfw-cal :type git :flavor melpa :files ("calfw-cal.el" "calfw-cal-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-ical" (calfw-ical :type git :flavor melpa :files ("calfw-ical.el" "calfw-ical-pkg.el") :host github :repo "kiwanami/emacs-calfw") "org-gcal" (org-gcal :type git :flavor melpa :host github :repo "kidd/org-gcal.el") "drag-stuff" (drag-stuff :type git :flavor melpa :host github :repo "rejeep/drag-stuff.el") "link-hint" (link-hint :type git :flavor melpa :host github :repo "noctuid/link-hint.el") "memoize" (memoize :type git :flavor melpa :host github :repo "skeeto/emacs-memoize") "parent-mode" (parent-mode :type git :flavor melpa :host github :repo "Fanael/parent-mode") "dash" (dash :type git :flavor melpa :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el") "dash-functional" (dash-functional :type git :flavor melpa :files ("dash-functional.el" "dash-functional-pkg.el") :host github :repo "magnars/dash.el") "s" (s :type git :flavor melpa :files ("s.el" "s-pkg.el") :host github :repo "magnars/s.el") "f" (f :type git :flavor melpa :files ("f.el" "f-pkg.el") :host github :repo "rejeep/f.el") "elisp-refs" (elisp-refs :type git :flavor melpa :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs") "cl-lib" nil "pkg-info" (pkg-info :type git :flavor melpa :host github :repo "emacsorphanage/pkg-info") "epl" (epl :type git :flavor melpa :host github :repo "cask/epl") "hydra" (hydra :type git :flavor melpa :files (:defaults (:exclude "lv.el") "hydra-pkg.el") :host github :repo "abo-abo/hydra") "lv" (lv :type git :flavor melpa :files ("lv.el" "lv-pkg.el") :host github :repo "abo-abo/hydra") "goto-chg" (goto-chg :type git :flavor melpa :host github :repo "emacs-evil/goto-chg") "pfuture" (pfuture :type git :flavor melpa :host github :repo "Alexander-Miller/pfuture") "ht" (ht :type git :flavor melpa :files ("ht.el" "ht-pkg.el") :host github :repo "Wilfred/ht.el") "async" (async :type git :flavor melpa :host github :repo "jwiegley/emacs-async") "transient" (transient :type git :flavor melpa :files ("lisp/*.el" "docs/transient.texi" "transient-pkg.el") :host github :repo "magit/transient") "with-editor" (with-editor :type git :flavor melpa :host github :repo "magit/with-editor") "font-utils" (font-utils :type git :flavor melpa :host github :repo "rolandwalker/font-utils") "persistent-soft" (persistent-soft :type git :flavor melpa :host github :repo "rolandwalker/persistent-soft") "pcache" (pcache :type git :flavor melpa :host github :repo "sigma/pcache") "eieio" nil "list-utils" (list-utils :type git :flavor melpa :host github :repo "rolandwalker/list-utils") "ucs-utils" (ucs-utils :type git :flavor melpa :host github :repo "rolandwalker/ucs-utils") "git-gutter" (git-gutter :type git :flavor melpa :host github :repo "emacsorphanage/git-gutter") "fringe-helper" (fringe-helper :type git :flavor melpa :host github :repo "nschum/fringe-helper.el") "embrace" (embrace :type git :flavor melpa :host github :repo "cute-jumper/embrace.el") "expand-region" (expand-region :type git :flavor melpa :host github :repo "magnars/expand-region.el") "annalist" (annalist :type git :flavor melpa :host github :repo "noctuid/annalist.el") "seq" nil "popup" (popup :type git :flavor melpa :files ("popup.el" "popup-pkg.el") :host github :repo "auto-complete/popup-el") "load-relative" (load-relative :type git :flavor melpa :host github :repo "rocky/emacs-load-relative") "loc-changes" (loc-changes :type git :flavor melpa :files ("loc-changes.el" "loc-changes-pkg.el") :host github :repo "rocky/emacs-loc-changes") "test-simple" (test-simple :type git :flavor melpa :host github :repo "rocky/emacs-test-simple") "websocket" (websocket :type git :flavor melpa :host github :repo "ahyatt/emacs-websocket") "anaphora" (anaphora :type git :flavor melpa :host github :repo "rolandwalker/anaphora") "deferred" (deferred :type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred") "polymode" (polymode :type git :flavor melpa :host github :repo "polymode/polymode") "exec-path-from-shell" (exec-path-from-shell :type git :flavor melpa :host github :repo "purcell/exec-path-from-shell") "spinner" nil "magit-popup" (magit-popup :type git :flavor melpa :host github :repo "magit/magit-popup") "ghub" (ghub :type git :flavor melpa :host github :repo "magit/ghub") "treepy" (treepy :type git :flavor melpa :host github :repo "volrath/treepy.el") "a" (a :type git :flavor melpa :host github :repo "plexus/a.el") "json" nil "auto-complete" (auto-complete :type git :flavor melpa :files ("*.el" "dict" "auto-complete-pkg.el") :host github :repo "auto-complete/auto-complete") "multiple-cursors" (multiple-cursors :type git :flavor melpa :host github :repo "magnars/multiple-cursors.el") "simple-httpd" (simple-httpd :type git :flavor melpa :host github :repo "skeeto/emacs-web-server") "math-symbol-lists" (math-symbol-lists :type git :flavor melpa :host github :repo "vspinu/math-symbol-lists") "pythonic" (pythonic :type git :flavor melpa :host github :repo "pythonic-emacs/pythonic") "shut-up" (shut-up :type git :flavor melpa :host github :repo "cask/shut-up") "web-completion-data" (web-completion-data :type git :flavor melpa :files ("*.el" "html-stuff" "web-completion-data-pkg.el") :host github :repo "osv/web-completion-data") "request-deferred" (request-deferred :type git :flavor melpa :files ("request-deferred.el" "request-deferred-pkg.el") :host github :repo "tkf/emacs-request") "alert" (alert :type git :flavor melpa :host github :repo "jwiegley/alert") "gntp" (gntp :type git :flavor melpa :host github :repo "tekai/gntp.el") "log4e" (log4e :type git :flavor melpa :host github :repo "aki2o/log4e") "persist" nil "ts" (ts :type git :flavor melpa :host github :repo "alphapapa/ts.el") "command-log-mode" (command-log-mode :type git :flavor melpa :host github :repo "lewang/command-log-mode") "zmq" (zmq :type git :flavor melpa :files (:defaults "Makefile" "src" "zmq-pkg.el") :host github :repo "dzop/emacs-zmq") "epc" (epc :type git :flavor melpa :files ("epc.el" "epcs.el" "epc-pkg.el") :host github :repo "kiwanami/emacs-epc") "concurrent" (concurrent :type git :flavor melpa :files ("concurrent.el" "concurrent-pkg.el") :host github :repo "kiwanami/emacs-deferred") "ctable" (ctable :type git :flavor melpa :files ("ctable.el" "ctable-pkg.el") :host github :repo "kiwanami/emacs-ctable") "highlight-indentation" (highlight-indentation :type git :flavor melpa :host github :repo "antonj/Highlight-Indentation-for-Emacs") "gnu-elpa-mirror" nil "emacsmirror-mirror" nil "bind-key" (bind-key :type git :flavor melpa :files ("bind-key.el" "bind-key-pkg.el") :host github :repo "jwiegley/use-package") "ivy" (ivy :type git :flavor melpa :files (:defaults (:exclude "swiper.el" "counsel.el" "ivy-hydra.el" "ivy-avy.el") "doc/ivy-help.org" "ivy-pkg.el") :host github :repo "abo-abo/swiper") "ivy-hydra" (ivy-hydra :type git :flavor melpa :files ("ivy-hydra.el" "ivy-hydra-pkg.el") :host github :repo "abo-abo/swiper") "counsel" (counsel :type git :flavor melpa :files ("counsel.el" "counsel-pkg.el") :host github :repo "abo-abo/swiper") "treemacs-evil" (treemacs-evil :type git :flavor melpa :files ("src/extra/treemacs-evil.el" "treemacs-evil-pkg.el") :host github :repo "Alexander-Miller/treemacs") "treemacs-projectile" (treemacs-projectile :type git :flavor melpa :files ("src/extra/treemacs-projectile.el" "treemacs-projectile-pkg.el") :host github :repo "Alexander-Miller/treemacs") "treemacs-magit" (treemacs-magit :type git :flavor melpa :files ("src/extra/treemacs-magit.el" "treemacs-magit-pkg.el") :host github :repo "Alexander-Miller/treemacs") "treemacs-persp" (treemacs-persp :type git :flavor melpa :files ("src/extra/treemacs-persp.el" "treemacs-persp-pkg.el") :host github :repo "Alexander-Miller/treemacs") "ivy-rtags" (ivy-rtags :type git :flavor melpa :files ("src/ivy-rtags.el" "ivy-rtags-pkg.el") :host github :repo "Andersbakken/rtags") "org-super-agenda" (org-super-agenda :type git :flavor melpa :host github :repo "alphapapa/org-super-agenda") "focus-autosave-mode" (focus-autosave-mode :type git :flavor melpa :host github :repo "Vifon/focus-autosave-mode.el") "jupyter" (jupyter :type git :flavor melpa :files (:defaults "Makefile" "widget.html" "js" "jupyter-pkg.el") :host github :repo "dzop/emacs-jupyter") "pynt" (pynt :type git :flavor melpa :files ("pynt/*" "pynt-pkg.el") :host github :repo "ebanner/pynt") "elpy" (elpy :type git :flavor melpa :files ("*.el" "NEWS.rst" "snippets" "elpy" "elpy-pkg.el") :host github :repo "jorgenschaefer/elpy"))) gnu-elpa-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 3 "explain-pause-mode" nil "straight" nil "evil-quick-diff" nil "rotate-text" nil "doom-snippets" nil "dired-git-info" (dired-git-info :type git :host github :repo "emacs-straight/dired-git-info" :files ("*" (:exclude ".git"))) "csv-mode" (csv-mode :type git :host github :repo "emacs-straight/csv-mode" :files ("*" (:exclude ".git"))) "auctex" (auctex :type git :host github :repo "emacs-straight/auctex" :files ("*" (:exclude ".git"))) "adaptive-wrap" (adaptive-wrap :type git :host github :repo "emacs-straight/adaptive-wrap" :files ("*" (:exclude ".git"))) "evil-markdown" nil "org-mode" nil "org-yt" nil "revealjs" nil "nose" nil "rainbow-mode" (rainbow-mode :type git :host github :repo "emacs-straight/rainbow-mode" :files ("*" (:exclude ".git"))) "cl-lib" nil "eieio" nil "seq" nil "spinner" (spinner :type git :host github :repo "emacs-straight/spinner" :files ("*" (:exclude ".git"))) "json" nil "persist" (persist :type git :host github :repo "emacs-straight/persist" :files ("*" (:exclude ".git"))) "emacsmirror-mirror" nil)) emacsmirror-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "explain-pause-mode" (explain-pause-mode :type git :host github :repo "emacsmirror/explain-pause-mode") "straight" (straight :type git :host github :repo "emacsmirror/straight") "evil-quick-diff" nil "rotate-text" (rotate-text :type git :host github :repo "emacsmirror/rotate-text") "doom-snippets" nil "evil-markdown" nil "org-mode" nil "org-yt" nil "revealjs" nil "nose" (nose :type git :host github :repo "emacsattic/nose") "cl-lib" nil "eieio" nil "seq" nil "json" nil))))

("org-elpa" "melpa" "gnu-elpa-mirror" "emacsmirror-mirror" "straight" "emacs" "use-package" "bind-key")

t
